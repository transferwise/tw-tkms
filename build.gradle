import com.github.spotbugs.snom.Confidence
import com.github.spotbugs.snom.Effort
import org.eclipse.jgit.api.errors.RefAlreadyExistsException

buildscript {
    if (!project.hasProperty("springBootVersion")) {
        ext.springBootVersion = System.getenv("SPRING_BOOT_VERSION") ?: "2.7.18"
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.9.4'
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.17.5"
    }
}

plugins {
    id 'idea'
    id 'org.springframework.boot' version "$springBootVersion" apply false
    id "com.github.spotbugs" version "6.0.2"
    id "at.zierler.yamlvalidator" version "1.5.0"
    id 'org.ajoberstar.grgit' version '5.2.1'
    id 'io.github.gradle-nexus.publish-plugin' version "1.3.0"
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
}

idea.project {
    vcs = 'Git'
    languageLevel = JavaVersion.VERSION_17
    targetBytecodeVersion = JavaVersion.VERSION_17
}

spotbugs {
    effort = Effort.valueOf('MAX')
    reportLevel = Confidence.valueOf('DEFAULT')
}

yamlValidator {
    searchPaths = ['.circleci/']
    allowDuplicates = false
    searchRecursive = true
}

task tagRelease {
    doLast {
        try {
            grgit.tag.add {
                name = "v$version"
                message = "Release of ${version}"
            }
            grgit.push(refsOrSpecs: ["v$version"])
        }
        catch (RefAlreadyExistsException ignored) {
            logger.warn("Tag v$version already exists.")
        }
    }
}

group = "com.transferwise.kafka"

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv("SONATYPE_USER")
            password = System.getenv("SONATYPE_PASSWORD")
        }
    }
}
