name: "Build and Test"

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  matrix_build:
    name: "Matrix Build"
    runs-on:
      - ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 100
      matrix:
        spring_boot_version:
          - 3.0.6
          - 2.7.11
          - 2.6.14
    env:
      SPRING_BOOT_VERSION: ${{ matrix.spring_boot_version }}
      GRADLE_OPTS: "-Djava.security.egd=file:/dev/./urandom -Dorg.gradle.parallel=true"
      IN_CI: true
      MARIADB_TCP_3306: 3306
      MARIADB_TCP_HOST: mysql1
      TW_TKMS_KAFKA_TCP_9092: 9092
      TW_TKMS_KAFKA_TCP_HOST: kafka1
      ZOOKEEPER_TCP_2181: 2181
      ZOOKEEPER_TCP_HOST: zk-service1
      POSTGRES_TCP_HOST: postgres1
      POSTGRES_TCP_5432: 5432
    container:
      image: azul/zulu-openjdk:17
    services:
      mysql1:
        image: mariadb:10.6
        env:
          MYSQL_ROOT_PASSWORD: example-password-change-me
          MYSQL_DATABASE: tkms
      postgres1:
        image: transferwiseworkspace/postgres12
        env:
          POSTGRES_PASSWORD: example-password-change-me
      zk-service1:
        image: bitnami/zookeeper:3.5.5
        env:
          ALLOW_ANONYMOUS_LOGIN: "yes"
          JVMFLAGS: "-Xmx512m -Xms64m"
      zk1:
        image: bitnami/zookeeper:3.4.14
        env:
          ALLOW_ANONYMOUS_LOGIN: "yes"
          JVMFLAGS: "-Xmx512m -Xms64m"
      kafka1:
        image: wurstmeister/kafka:2.12-2.2.0
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zk1:2181
          KAFKA_LISTENERS: PLAINTEXT://:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_MESSAGE_MAX_BYTES: "10485760"
          KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS: 20000
          KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: "true"
          KAFKA_LEADER_IMBALANCE_CHECK_INTERVAL_SECONDS: 5
          KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    steps:
      - name: "Install packages"
        # We do some changes as the main ubuntu repo is currently very slow.
        run: |
          apt-get update && apt-get install -y git unzip
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.1.1
          gradle-home-cache-cleanup: true
          # Comment out when you are upgrading gradle in a branch and doing tons of commits you would need to test.
          # cache-read-only: false
      - name: "Assemble jar"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: assemble --console=plain --info --stacktrace --parallel
      - name: "Compile tests"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: compileTest --console=plain --info --stacktrace --parallel
      - name: "Run checks"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: check -x test --console=plain --stacktrace
      - name: "Run tests"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: -Dspring.profiles.include=continuous-integration test --console=plain --info --stacktrace
      - name: "Test if publishing works"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: publishToMavenLocal --console=plain --info --stacktrace
      - name: "Publish Test Report"
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          check_name: Test Report-(${{ matrix.spring_boot_version }})
          report_paths: '**/build/test-results/**/*.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          require_tests: true
      - name: Publish checkstyle report
        if: always()
        uses: jwgmeligmeyling/checkstyle-github-action@master
        with:
          name: Checkstyle Report-(${{ matrix.spring_boot_version }})
          path: '**/build/reports/**/*.xml'
      - name: Publish spotbugs report
        if: always()
        uses: jwgmeligmeyling/spotbugs-github-action@master
        with:
          name: Spotbugs Report-(${{ matrix.spring_boot_version }})
          path: '**/build/reports/**/*.xml'
      - name: "Collect test reports"
        run: |
          tar -zcvf all-test-reports-${{ matrix.spring_boot_version }}.tar.gz **/build/reports
        if: always()
      - name: "Store test results"
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: all-test-reports-${{ matrix.spring_boot_version }}
          path: all-test-reports-${{ matrix.spring_boot_version }}.tar.gz
          retention-days: 7

  build:
    name: "Build and Test"
    runs-on:
      - ubuntu-latest
    needs: matrix_build
    container:
      image: azul/zulu-openjdk:17
    steps:
      # Needed hacks to properly fail the build when one matrix build fails.
      - name: Do something so that GHA is happy
        run: echo "Be happy!"
      - name: Verify matrix jobs succeeded
        if: ${{ needs.matrix_build.result != 'success' }}
        run: exit 1
      - name: "Install packages"
        # We do some changes as the main ubuntu repo is currently very slow.
        run: |
          apt-get update && apt-get install -y git unzip
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 8.1.1
          gradle-home-cache-cleanup: true
          # Comment out when you are upgrading gradle in a branch and doing tons of commits you would need to test.
          # cache-read-only: false
      - name: "Tag release"
        if: github.ref == 'refs/heads/master'
        uses: gradle/gradle-build-action@v2
        with:
          arguments: tagRelease --console=plain --info --stacktrace
