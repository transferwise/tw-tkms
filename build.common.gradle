import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

apply plugin: "com.github.spotbugs"
apply plugin: "checkstyle"

group = "com.transferwise.kafka"

repositories {
    mavenCentral()
    mavenLocal()
}

apply from: "$rootProject.rootDir/build.libraries.gradle"

configurations {
    local {
        canBeResolved(false)
        canBeConsumed(false)
    }
    implementation {
        extendsFrom(local)
    }
    compileClasspath {
        extendsFrom(local)
    }
    runtimeClasspath {
        extendsFrom(local)
    }
    testCompileClasspath {
        extendsFrom(local)
    }
    testRuntimeClasspath {
        extendsFrom(local)
    }
    annotationProcessor {
        extendsFrom(local)
    }
    testAnnotationProcessor {
        extendsFrom(local)
    }
}

dependencies {
    local platform(libraries.springBootDependencies)
    local libraries.lombok

    compileOnly libraries.spotbugsAnnotations
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withSourcesJar()
    withJavadocJar()
}

compileJava {
    options.encoding = 'utf-8'
    options.compilerArgs << '-parameters'
    options.compilerArgs << '-Xlint'
    options.compilerArgs << '-Xlint:-processing'
    
//  Enable in a separate PR    
//    javaCompiler = javaToolchains.compilerFor {
//        languageVersion = JavaLanguageVersion.of(11)
//    }
}

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.withType(Checkstyle) {
    config = resources.text.fromFile(file('../google_checks.xml'))

    // Flyway requires Vx__ class name, which ofc conflicts with all sensible rules.
    exclude "db/migration/**"

    maxWarnings = 0

    reports {
        xml.required = true
        html.required = true
    }
}

// Exclude generated sources
checkstyleMain.source = "src/main/java"

jar {
    manifest {
        attributes(
                "Implementation-Title": projectName,
                "Implementation-Version": archiveVersion
        )
    }
}

test {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
    
    useJUnitPlatform()
    jvmArgs("-Xmx1g")
    testLogging {
        events TestLogEvent.STARTED, TestLogEvent.FAILED, TestLogEvent.SKIPPED, TestLogEvent.PASSED,
                TestLogEvent.STANDARD_ERROR
        showExceptions = true
        showStackTraces = true
        exceptionFormat = TestExceptionFormat.FULL
    }
}

tasks.findAll { it.name.startsWith("spotbugs") }*.configure {
    effort = "max"

    excludeFilter = file('../spotbugs-exclude.xml')

    reports {
        xml.required = true
        html.required = true
    }
}

clean.doFirst {
    delete "out"
}

yamlValidator {
    searchPaths = ['src']
    allowDuplicates = false
    searchRecursive = true
}